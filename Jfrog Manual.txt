Why Only Jfrog
Jfrog Artifactory?
What is Artifact
what is artifact Repository?
why artifact Repository?
Type of packages it supports:
How to setup Artifactory server on AWS 
Artifact Deployment from maven to Jfrog
Artifactory Integration with jenkins

repository management tool
===========================
 - Repository management tools helps development teams create, maintain, and track their software packages.

Options
-------
1. Jfrog Artifact
2. Nexus
3. Apache Archiva
4. Nuget
5. github
6. s3

Why Only Jfrog
--------------
But jfrog supports wide range of formets and types.
Eg:- 
     python repo
     chef repo
     puppet repo
     Apt repo
     yum repo
     docker repo
     rpm repo
     maven repo...etc

- it is a repository management tool
- A universal artifact repository manager
- JFrog Artifactory is a repository manager that supports all available software package types
- Artifactory, the first-in-class binary repository management

Jfrog Artifactory?
==================
Jfrog Artifactory is a tool used in devops methodology to store artifacts (readily deployable code)

What is Artifact
----------------
The files that contain both compiled code and resources that are used to compile them are know as artifact. 
- They are readily deployable files.
								     	
- source code  -->  Build Tools  -->  Compilation  -->  Binary code -->  Dependencys/resources -->  Artifact

- in java an artifacts would be jar, war, ear...etc file
- in .net an artifacts would be .dll file


 								    	 
what is artifact Repository?
----------------------------
- An artifact repository is a repository which can store multiple different versions of artifacts.each
  time the war or tar.gz file is created. it stored in a server dedicated for the artifacts.


in real-time in the above process if you have any error in test env, we will rollback to version control to fix it. instead of that if you store artifacts in repo we can rollback to prevision version.

Author
------
https://jfrog.com
- they have number of products like 
    - Jfrog Artifactory (Very Popular)
    - Jfrog Pipelines
    - Jfrog x-ray
    - Jfrog connect
    - JFrog Container Registry ...etc
 
Written in
------------
- Jfrog developed in java. it is platform independent(run in windows, mac, Linux)

Releases
--------
- Free, Professional and Enterprice

Free vs Pro
-----------
	https://jfrog.com/community/download-artifactory-oss/

Type of packages it supports:
-----------------------------
	https://www.jfrog.com/confluence/display/JFROG/Package+Management
Note:- what kind of repo = what kind of package



 How to setup Artifactory server on AWS 
---------------------------------------

1. Pre-requisites:
   An AWS T2.medium (4GB RAM)EC2 instance (Linux)
   Open port 8081 and 8082 in the security group

wget https://releases.jfrog.io/artifactory/artifactory-rpms/artifactory-rpms.repo -O jfrog-artifactory-rpms.repo;

sudo mv jfrog-artifactory-rpms.repo /etc/yum.repos.d/;

sudo yum update && sudo yum install jfrog-artifactory-oss

systemctl start artifactory.service

systemctl status artifactory.service


     http://<PUBLIC_IP_Address>:8081

After Login we need to Provide 

Username as admin
Password as password 

#Note:we have to change it password after loggedin



########## APPROACH-1 #########

Artifact Deployment from maven to Jfrog without jenkins 
=======================================

1. Add Deployment element to maven pom.xml file.
 <distributionManagement>
    <repository>
        <id>central</id>
        <name>NareshIT</name>
        <url>http://34.238.157.19:8081/artifactory/naresh-repo</url>
    </repository>
    <snapshotRepository>
        <id>central</id>
        <name>NareshIT</name>
        <url>http://34.238.157.19:8081/artifactory/naresh-repo</url>
    </snapshotRepository>
</distributionManagement>

2. Add Jfrog Credentials to apache-maven-3.8.6-->--conf-->settings.xml file.
	<servers>
	    <server>
      		<id>naresh</id>
      		<username>admin</username>
      		<password>naresh_123</password>
    	    </server>
	</servers>

3. Navigate to maven structure where pom.xml and src locates, and give below command.
    - mvn Deploy


###############APPROACH-2##########

Artifactory Integration maven integration with Jfrog by  using jenkins
=====================================

pre-requisites

A Artifactory server
A Jenkins Server

Integration Steps

Login to Jenkins to integrate Artifactory with Jenkins

1. Install "Artifactory" plug-in
     Manage Jenkins -> Jenkins Plugins -> available -> artifactory
2. Configure Artifactory server credentials
     Manage Jenkins -> Configure System -> Artifactory (or) Jfrog
3. Artifactory Servers
	Server ID : test
	URL : Artifactory Server URL (http://localhost:8081/)
	Username : admin
	Password : default password is "password" only. (login with default password later you can change)
        Test the connection



Approach-1  
Create a Freestyle Project

- Create a new job
    ->  Job Name : ex:Job1
- Source code management
    ->  Github URL : <githuburl>
- Build Environment
    ->  Maven3-Artifactory Integration : `<provide Artifactory server and repository details
- Build --> Invoke Artifactory Maven3
- Goals: clean deploy
- Execute job

Approach-2

# Create a Maven Project
- Create a new job
    ->. Job Name : ex:Job2
- Source code management
    ->  Github URL : <github>
- Build Environment(optional)
    ->  Resolve artifacts from Artifactory : <provide Artifactory server and repository details>
- Build - Goals: clean install
    ->. Post-build Actions
- Deploy Artifacts to Artifactory : <provide Artifactory server and repository details>
- Execute job
 

----------------------------------------------------------------------------------------------------------------------------

Approach-3  (recomended)

step-1 Install Artifactory plugin 

       
step-2 Configure Artifactory server credentials
          Manage Jenkins -> Configure System -> Artifactory (or) Jfrog (Note: after configure serverID it will take care of URL and authentication of JFROG)
Step-3 create pipeline job


pipeline {
    agent any

    stages {
        stage('stage-1') {
            steps {
                git branch: 'main', credentialsId: 'terraform', url: 'https://github.com/nareshdevopscloud/project-maven-jenkins-CI-CD.git'
            }
        }
   
        stage('clean') {
            steps {
              sh  'mvn clean'
            }
        }
        
        stage('test') {
            steps {
              sh  'mvn test'
            }
        }
        stage('install') {
            steps {
               sh  'mvn install'
            }
        }
        
        stage('Push artifacts into artifactory') {
            steps {
              rtUpload (
                serverId: 'jfrog_server',
                spec: '''{
                      "files": [
                        {
                          "pattern": "*.war",
                           "target": "JFrog/"
                        }
                    ]
                }'''
              )
          }
        }
        
        stage('deployment') {
            steps {
                
             deploy adapters: [tomcat9(credentialsId: 'tomcat', path: '', url: 'http://18.204.210.126:8181/')], contextPath: null, war: 'webapp/target/*.war'

            }
        }
        
        
    }
}







